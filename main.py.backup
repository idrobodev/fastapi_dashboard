from fastapi import FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session

from models import ApiResponse
from database_models import db_service, SedeModel, ParticipanteModel, AcudienteModel, MensualidadModel, SessionLocal

# ============================================================================
# Configuración de la aplicación
# ============================================================================

app = FastAPI(
    title="Dashboard API - Corporación Todo por un Alma",
    description="API REST para gestionar participantes, acudientes, sedes y mensualidades",
    version="1.0.0"
)

# Configuración de CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3001"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ============================================================================
# Funciones auxiliares
# ============================================================================

def get_db():
    """Obtener sesión de base de datos"""
    return SessionLocal()

# ============================================================================
# Health Check Endpoint
# ============================================================================

@app.get("/api/health")
async def health_check():
    """Health check endpoint para verificar que el servidor está funcionando"""
    return {"status": "ok", "message": "API is running"}

@app.get("/api/test")
async def test_endpoint():
    return {"test": "ok"}

# ============================================================================
# Endpoints de Participantes
# ============================================================================

@app.get("/api/participantes")
async def get_participantes():
    """Obtiene la lista de todos los participantes con información de sede"""
    try:
        db = get_db()
        participantes = db.query(ParticipanteModel).all()

        result = []
        for p in participantes:
            sede = db.query(SedeModel).filter(SedeModel.id == p.id_sede).first()
            participante_data = {
                "id": p.id,
                "nombres": p.nombres,
                "apellidos": p.apellidos,
                "tipo_documento": p.tipo_documento,
                "numero_documento": p.numero_documento,
                "fecha_nacimiento": p.fecha_nacimiento,
                "genero": p.genero,
                "fecha_ingreso": p.fecha_ingreso,
                "estado": p.estado,
                "id_sede": p.id_sede,
                "telefono": p.telefono,
                "sede": {
                    "id": sede.id,
                    "nombre": sede.nombre,
                    "direccion": sede.direccion
                } if sede else None
            }
            result.append(participante_data)

        return ApiResponse(data=result, error=None)
    finally:
        db.close()

@app.get("/api/participantes/{id}")
async def get_participante(id: int):
    """Obtiene un participante por ID con información de sede"""
    try:
        db = get_db()
        participante = db.query(ParticipanteModel).filter(ParticipanteModel.id == id).first()

        if not participante:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Participante no encontrado"
            )

        sede = db.query(SedeModel).filter(SedeModel.id == participante.id_sede).first()
        participante_data = {
            "id": participante.id,
            "nombres": participante.nombres,
            "apellidos": participante.apellidos,
            "tipo_documento": participante.tipo_documento,
            "numero_documento": participante.numero_documento,
            "fecha_nacimiento": participante.fecha_nacimiento,
            "genero": participante.genero,
            "fecha_ingreso": participante.fecha_ingreso,
            "estado": participante.estado,
            "id_sede": participante.id_sede,
            "telefono": participante.telefono,
            "sede": {
                "id": sede.id,
                "nombre": sede.nombre,
                "direccion": sede.direccion
            } if sede else None
        }

        return ApiResponse(data=participante_data, error=None)
    finally:
        db.close()

# ============================================================================
# Endpoints de Acudientes
# ============================================================================

@app.get("/api/acudientes")
async def get_acudientes():
    """Obtiene la lista de todos los acudientes con información de participante"""
    try:
        db = get_db()
        acudientes = db.query(AcudienteModel).all()

        result = []
        for a in acudientes:
            participante = db.query(ParticipanteModel).filter(ParticipanteModel.id == a.id_participante).first()
            acudiente_data = {
                "id_acudiente": a.id_acudiente,
                "nombres": a.nombres,
                "apellidos": a.apellidos,
                "tipo_documento": a.tipo_documento,
                "numero_documento": a.numero_documento,
                "parentesco": a.parentesco,
                "telefono": a.telefono,
                "email": a.email,
                "direccion": a.direccion,
                "id_participante": a.id_participante,
                "participante": {
                    "id": participante.id,
                    "nombres": participante.nombres,
                    "apellidos": participante.apellidos
                } if participante else None
            }
            result.append(acudiente_data)

        return {"data": result, "error": None}
    finally:
        db.close()

# ============================================================================
# Endpoints de Sedes
# ============================================================================

@app.get("/api/sedes")
async def get_sedes():
    """Obtiene la lista de todas las sedes"""
    try:
        db = get_db()
        sedes = db.query(SedeModel).all()

        result = []
        for s in sedes:
            sede_data = {
                "id": s.id,
                "nombre": s.nombre,
                "direccion": s.direccion,
                "telefono": s.telefono,
                "capacidad_maxima": s.capacidad_maxima,
                "estado": s.estado,
                "tipo": s.tipo
            }
            result.append(sede_data)

        return {"data": result, "error": None}
    finally:
        db.close()

# ============================================================================
# Endpoints de Usuarios
# ============================================================================

# Commented out for testing
# @app.get("/api/usuarios")
# async def get_usuarios():
#     """Obtiene la lista de todos los usuarios"""
#     try:
#         db = get_db()
#         usuarios = db.query(UsuarioModel).all()

#         result = []
#         for u in usuarios:
#             usuario_data = {
#                 "id_usuario": u.id_usuario,
#                 "email": u.email,
#                 "rol": u.rol
#             }
#             result.append(usuario_data)

#         return {"data": result, "error": None}
#     finally:
#         db.close()

# ============================================================================
# Dashboard Stats
# ============================================================================

@app.get("/api/dashboard/stats")
async def get_dashboard_stats():
    """Obtiene estadísticas generales del dashboard"""
    try:
        db = get_db()
        stats = {
            "participantes": db.query(ParticipanteModel).count(),
            "acudientes":  db.query(AcudienteModel).count(),
            "mensualidades": db.query(MensualidadModel).count()
        }
        return stats
    finally:
        db.close()

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8081)